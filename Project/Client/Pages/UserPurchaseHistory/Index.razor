@using Project.Shared.Domain

@page "/UserPurchaseHistory/{CustomerId}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title"> User Purchase History</h3>

@if (UserPurchaseHistory == null)
{
    <div class="alert alert-info">Loading Purchase History...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>UserPurchaseHistoryId</th>
            </tr>
        </thead>
        <tbody>
            @if (UserPurchaseHistory.Count == 0)
            {
                <tr>
                    <td colspan="4">No purchase history available.</td>
                </tr>
            }
            else
            {
                @foreach (var purchase in UserPurchaseHistory)
                {
                    <tr>
                        <td>@purchase.UserPurchaseHistoryId</td>
                        <td>
                            <a href="/UserPurchaseHistory/view/@purchase.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/UserPurchaseHistory/edit/@purchase.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(purchase.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<UserPurchaseHistory> UserPurchaseHistory;
    [Parameter] public int CustomerId { get; set; }  <!-- Add the CustomerId parameter -->

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Use CustomerId to fetch data from the server
            UserPurchaseHistory = await _client.GetFromJsonAsync<List<UserPurchaseHistory>>($"/api/customers/{CustomerId}/purchase-history");
            Console.WriteLine($"Received {UserPurchaseHistory.Count} records");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    async Task Delete(int purchaseId)
    {
        var userpurchasehistory = UserPurchaseHistory.First(q => q.Id == purchaseId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {userpurchasehistory.UserPurchaseHistoryId}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.UserPurchaseHistoryEndpoint}/{purchaseId}");
            await OnInitializedAsync();
        }
    }
}
