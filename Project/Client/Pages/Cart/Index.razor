@page "/Cart/"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3 class="card-title"> Cart</h3>

@if (Carts == null)
{
    <div class="alert alert-info">Loading Cart...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Cart Id</th>
                <th>Customer Id</th>
                <th>Car Name</th>
                <th>Rent Start</th>
                <th>Rent End</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Carts.Count == 0)
            {
                <tr>
                    <td colspan="6">No carts available.</td>
                </tr>
            }
            else
            {
                @foreach (var cart in Carts)
                {
                    <tr>
                        <td>@cart.Id</td>
                        <td>@cart.CustomerId</td>
                        <td>@cart.CarName</td>
                        <td>@cart.RentStart.ToString("MM/dd/yyyy")</td>
                        <td>@cart.RentEnd.ToString("MM/dd/yyyy")</td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(() => ViewCart(cart.Id))">
                                View
                            </button>
                            <button class="btn btn-warning" @onclick="@(() => EditCart(cart.Id))">
                                Edit
                            </button>
                            <button class="btn btn-danger" @onclick="@(() => DeleteCart(cart.Id))">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Project.Shared.Domain.Cart> Carts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Carts = await _client.GetFromJsonAsync<List<Project.Shared.Domain.Cart>>($"{Endpoints.CartEndpoint}");
            Console.WriteLine($"Received {Carts.Count} records");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task ViewCart(int cartId)
    {
        // Implement logic for viewing cart details
    }

    private async Task EditCart(int cartId)
    {
        // Implement logic for editing cart details
    }

    private async Task DeleteCart(int cartId)
    {
        var cart = Carts.FirstOrDefault(c => c.Id == cartId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete cart {cartId}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CartEndpoint}/{cartId}");
            await OnInitializedAsync();
        }
    }
}
